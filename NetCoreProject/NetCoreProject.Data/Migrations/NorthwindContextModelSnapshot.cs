// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreProject.Data.EFModels;

namespace NetCoreProject.Data.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    partial class NorthwindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.SalesOrderNumber", "'SalesOrderNumber', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Address_rowguid");

                    b.HasIndex("StateProvince");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvince", "PostalCode", "CountryRegion");

                    b.ToTable("Address","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.BuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemInformationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnName("Database Version")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationId")
                        .HasName("PK__BuildVer__35E58ECAD625D208");

                    b.ToTable("BuildVersion");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .HasName("CategoryName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(25);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesPerson")
                        .HasMaxLength(256);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.ToTable("Customer","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_CustomerAddress_CustomerID_AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_CustomerAddress_rowguid");

                    b.ToTable("CustomerAddress","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.CustomerCustomerDemo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(5);

                    b.Property<string>("CustomerTypeId")
                        .HasColumnName("CustomerTypeID")
                        .HasMaxLength(10);

                    b.HasKey("CustomerId", "CustomerTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CustomerCustomerDemo");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.CustomerDemographics", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .HasColumnName("CustomerTypeID")
                        .HasMaxLength(10);

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("ntext");

                    b.HasKey("CustomerTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Customers", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(5);

                    b.Property<string>("Address")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .HasMaxLength(15);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ContactName")
                        .HasMaxLength(30);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(15);

                    b.Property<string>("Fax")
                        .HasMaxLength(24);

                    b.Property<string>("Phone")
                        .HasMaxLength(24);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasMaxLength(15);

                    b.HasKey("CustomerId");

                    b.HasIndex("City")
                        .HasName("City");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.HasIndex("Region")
                        .HasName("Region");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.EmployeeTerritories", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("TerritoryId")
                        .HasColumnName("TerritoryID")
                        .HasMaxLength(20);

                    b.HasKey("EmployeeId", "TerritoryId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TerritoryId");

                    b.ToTable("EmployeeTerritories");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasMaxLength(15);

                    b.Property<string>("Country")
                        .HasMaxLength(15);

                    b.Property<string>("Extension")
                        .HasMaxLength(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasMaxLength(15);

                    b.Property<int?>("ReportsTo");

                    b.Property<string>("Title")
                        .HasMaxLength(30);

                    b.Property<string>("TitleOfCourtesy")
                        .HasMaxLength(25);

                    b.HasKey("EmployeeId");

                    b.HasIndex("LastName")
                        .HasName("LastName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.HasIndex("ReportsTo");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("ErrorNumber");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126);

                    b.Property<int?>("ErrorSeverity");

                    b.Property<int?>("ErrorState");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<float>("Discount");

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK_Order_Details");

                    b.HasIndex("OrderId")
                        .HasName("OrdersOrder_Details");

                    b.HasIndex("ProductId")
                        .HasName("ProductsOrder_Details");

                    b.ToTable("Order Details");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(5);

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60);

                    b.Property<string>("ShipCity")
                        .HasMaxLength(15);

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(15);

                    b.Property<string>("ShipName")
                        .HasMaxLength(40);

                    b.Property<string>("ShipPostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(15);

                    b.Property<int?>("ShipVia");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId")
                        .HasName("CustomersOrders");

                    b.HasIndex("EmployeeId")
                        .HasName("EmployeesOrders");

                    b.HasIndex("OrderDate")
                        .HasName("OrderDate");

                    b.HasIndex("ShipPostalCode")
                        .HasName("ShipPostalCode");

                    b.HasIndex("ShipVia")
                        .HasName("ShippersOrders");

                    b.HasIndex("ShippedDate")
                        .HasName("ShippedDate");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID");

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<byte[]>("ThumbNailPhoto");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Product_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasName("AK_Product_ProductNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Product_rowguid");

                    b.ToTable("Product","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnName("ParentProductCategoryID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductCategory_Name");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDescriptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductModelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("Culture")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModelProductDescription_rowguid");

                    b.ToTable("ProductModelProductDescription","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("Discontinued");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20);

                    b.Property<short?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId")
                        .HasName("CategoryID");

                    b.HasIndex("ProductName")
                        .HasName("ProductName");

                    b.HasIndex("SupplierId")
                        .HasName("SuppliersProducts");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Region");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderDetail_rowguid");

                    b.ToTable("SalesOrderDetail","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [SalesLT].[SalesOrderNumber])");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID],(0)),N'*** ERROR ***'))")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("ShipToAddressId");

                    b.ToTable("SalesOrderHeader","SalesLT");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Shippers", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShipperID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Phone")
                        .HasMaxLength(24);

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .HasMaxLength(15);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ContactName")
                        .HasMaxLength(30);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(15);

                    b.Property<string>("Fax")
                        .HasMaxLength(24);

                    b.Property<string>("HomePage")
                        .HasColumnType("ntext");

                    b.Property<string>("Phone")
                        .HasMaxLength(24);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasMaxLength(15);

                    b.HasKey("SupplierId");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Territories", b =>
                {
                    b.Property<string>("TerritoryId")
                        .HasColumnName("TerritoryID")
                        .HasMaxLength(20);

                    b.Property<int>("RegionId")
                        .HasColumnName("RegionID");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TerritoryId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.CustomerAddress", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId");

                    b.HasOne("NetCoreProject.Data.EFModels.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.CustomerCustomerDemo", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Customers", "Customer")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerCustomerDemo_Customers");

                    b.HasOne("NetCoreProject.Data.EFModels.CustomerDemographics", "CustomerType")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_CustomerCustomerDemo");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.EmployeeTerritories", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Employees", "Employee")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeTerritories_Employees");

                    b.HasOne("NetCoreProject.Data.EFModels.Territories", "Territory")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TerritoryId")
                        .HasConstraintName("FK_EmployeeTerritories_Territories");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Employees", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Employees", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("FK_Employees_Employees");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.OrderDetails", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_Details_Orders");

                    b.HasOne("NetCoreProject.Data.EFModels.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Order_Details_Products");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Orders", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Customers", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("NetCoreProject.Data.EFModels.Employees", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Orders_Employees");

                    b.HasOne("NetCoreProject.Data.EFModels.Shippers", "ShipViaNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia")
                        .HasConstraintName("FK_Orders_Shippers");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Product", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("NetCoreProject.Data.EFModels.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductCategory", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.ProductModelProductDescription", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductDescriptionId");

                    b.HasOne("NetCoreProject.Data.EFModels.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Products", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("NetCoreProject.Data.EFModels.Suppliers", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Products_Suppliers");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.SalesOrderDetail", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Product", "Product")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("ProductId");

                    b.HasOne("NetCoreProject.Data.EFModels.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.SalesOrderHeader", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("NetCoreProject.Data.EFModels.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId");

                    b.HasOne("NetCoreProject.Data.EFModels.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");
                });

            modelBuilder.Entity("NetCoreProject.Data.EFModels.Territories", b =>
                {
                    b.HasOne("NetCoreProject.Data.EFModels.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Territories_Region");
                });
#pragma warning restore 612, 618
        }
    }
}
